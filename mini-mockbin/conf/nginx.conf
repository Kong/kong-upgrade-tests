
worker_processes auto;
daemon off;

pid pids/nginx.pid;
error_log /dev/stdout debug;

worker_rlimit_nofile 1024;

events {
    worker_connections 1024;
    multi_accept on;
}

http {
    server {
        listen 80;
        listen [::]:80;
        location ~ "" {
            content_by_lua_block {
                local NULL = {}
                -- mini json-encode supporting only null, objects and strings
                local function json_encode(val)
                    if val == NULL then
                        return "null"
                    elseif type(val) == "table" then
                        local items = {}
                        for k,v in pairs(val) do
                            table.insert(items, '"'..k..'": '.. json_encode(v))
                        end
                        return "{" .. table.concat(items, ", ") .. "}"
                    else
                        return string.format("%q", val)
                    end
                end
                local headers = ngx.req.get_headers()
                local res = {
                    args = {},
                    data = "",
                    files = {},
                    form = {},
                    json = NULL,
                    headers = headers,
                    method = ngx.req.get_method(),
                    url = "http://" .. (headers["x-forwarded-host"] or headers["host"]) .. ngx.var.uri,
                }
                ngx.say(json_encode(res))
                return 200;
            }
        }
    }

    server {
        listen 443 ssl;
        ssl_certificate ../ssl/kong-default.crt;
        ssl_certificate_key ../ssl/kong-default.key;
        location ~ "" {
            content_by_lua_block {
                local NULL = {}
                -- mini json-encode supporting only null, objects and strings
                local function json_encode(val)
                    if val == NULL then
                        return "null"
                    elseif type(val) == "table" then
                        local items = {}
                        for k,v in pairs(val) do
                            table.insert(items, '"'..k..'": '.. json_encode(v))
                        end
                        return "{" .. table.concat(items, ", ") .. "}"
                    else
                        return string.format("%q", val)
                    end
                end
                local headers = ngx.req.get_headers()
                local res = {
                    args = {},
                    data = "",
                    files = {},
                    form = {},
                    json = NULL,
                    headers = headers,
                    method = ngx.req.get_method(),
                    url = "https://" .. (headers["x-forwarded-host"] or headers["host"]) .. ngx.var.uri,
                }
                ngx.say(json_encode(res))
                return 200;
            }
        }
    }
}
